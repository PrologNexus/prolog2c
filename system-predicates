%%% list of system-predicates -*- Prolog -*-

control_structure((X, Y)).
control_structure((X; Y)).
control_structure((X -> Y)).
control_structure(!).
control_structure(\+X).
control_structure(findall(-X, Y, -Z), 'Y must be a callable term, uses library "findall.pl"').
control_structure(forall(X, Y), 'X and Y must be callable terms').
control_structure(foreign_call(X)).
control_structure(global_ref(+X, -Y)).
control_structure(global_set(+X, +Y)).
control_structure(catch(+X, ?Y, +Z)).
control_structure(repeat).
control_structure(bagof(?T, +G, +L)).
control_structure(setof(?T, +G, +L)).
control_structure('$call_predicate'(+X, +Y)).
control_structure(delay(?X, +Y)).
control_structure(freeze(?X, +Y)).
control_structure(dif(?X, ?Y)).
control_structure(once(+X)).
				    
system_predicate(#X < #Y).
system_predicate(#X > #Y).
system_predicate(#X =< #Y).
system_predicate(#X >= #Y).
system_predicate(#X =:= #Y).
system_predicate(#X =\= #Y).
system_predicate(-X is #Y).

system_predicate(true).
system_predicate(fail).
system_predicate(?X = ?Y).
system_predicate(?X \= ?Y).
system_predicate(?X == ?Y).
system_predicate(?X \== ?Y).
system_predicate(?X @< ?Y).
system_predicate(?X @> ?Y).
system_predicate(?X @=< ?Y).
system_predicate(?X @>= ?Y).
system_predicate(arg(+X, +X, ?X)).
system_predicate(asserta(+X)).		
system_predicate(asserta(+X, -Y)).		
system_predicate(assertz(+X)).		
system_predicate(assertz(+X, -Y)).		
system_predicate(atom(+X)).
system_predicate(atom_codes(?X, ?Y)).
system_predicate(atom_hash(+X, -Y)).
system_predicate(atomic(+X)).
system_predicate(clause(+X, ?Y)).
system_predicate(clause(+X, ?Y, -Z)).
system_predicate(command_line_arguments(-X), _, 'Filters out runtime-options ("-:..."), does not include program name').
system_predicate(compound(+X)).
system_predicate(db_reference(?X)).
system_predicate(display(+X)).
system_predicate(display(+S, +X)).
system_predicate(enable_trace(+X)).
system_predicate(erase(+X)).
system_predicate(exists_file(+X), _, 'fails if nonexistent or not a regular file').
system_predicate(exists_directory(+X), _, 'fails if nonexistent or not a directory').
system_predicate(float(+X)).
system_predicate(foreign_pointer(+X)).
system_predicate(functor(?X, ?Y, ?Z)).
system_predicate(garbage_collect, _, 'GC is triggered on next entry to predicate').
system_predicate(getenv(+X, -Y), _, 'fails if variable does not exist').
system_predicate(getpid(-X)).
system_predicate(halt, _, 'exits with code 0').
system_predicate(halt(+X)).
system_predicate(integer(+X)).
system_predicate(nl).
system_predicate(nl(+X)).
system_predicate(nonvar(+X)).
system_predicate(number(+X)).
system_predicate(number_codes(?X, ?Y), _, 'uses strtol(3)/strtod(3), so allows leading space').
system_predicate(peek(+X), _, '-1 on EOF').
system_predicate(put(+X), _, 'X may be fixnum or symbol').
system_predicate(sleep(+X)).
system_predicate(stream(+X)).
system_predicate(var(+X)).
system_predicate(suspend(?X, ?Y)).
system_predicate(acyclic_term(?X)).
system_predicate(close(+X)).
system_predicate(char_code(?X, ?Y)).
system_predicate(atom_length(?X, ?Y)).
system_predicate(seeing(-X)).
system_predicate(telling(-X)).
system_predicate(current_input(-X)).
system_predicate(current_output(-X)).
system_predicate(current_error_output(-X)).
system_predicate(get_byte(-X)).
system_predicate(get_byte(+S, -X)).
system_predicate(get_code(-X)).
system_predicate(get_code(+S, -X)).
system_predicate(peek_byte(-X)).
system_predicate(peek_byte(+S, -X)).
system_predicate(peek_code(-X)).
system_predicate(peek_code(+S, -X)).
system_predicate(put_byte(+X)).
system_predicate(put_byte(+S, +X)).
system_predicate(put_code(+X)).
system_predicate(put_code(+S, +X)).
system_predicate(ground(?X)).
system_predicate(rename_file(+X, +Y)).
system_predicate(delete_file(+X)).

system_predicate(append(+X), 'io.pl').
system_predicate(compare(-X, ?X, ?Z), 'misc.pl').
system_predicate(copy_term(?X, ?Y), 'misc.pl').
system_predicate(duplicate_term(?X, ?Y), 'misc.pl').
system_predicate(between(+X, +Y, ?Z), 'misc.pl').
system_predicate(current_op(?X, ?Y, ?Z), 'op.pl').
system_predicate(get(-X), 'io.pl').
system_predicate(get0(-X), 'io.pl').
system_predicate(intersection(+X, +Y, -Z), 'sets.pl').
system_predicate(keysort(+X, -Y), 'sorts.pl').
system_predicate(length(?X, ?Y), 'lists.pl').
system_predicate(list_to_ord_set(+X, -Y), 'ordset.pl').
system_predicate(member(?X, ?Y), 'lists.pl').
system_predicate(merge(+X, +Y, -Z), 'sorts.pl').
system_predicate(name(?X, ?Y), 'misc.pl').
system_predicate(op(+X, +Y, +N), 'op.pl').
system_predicate(ord_disjoint(+X, +Y), 'ordset.pl').
system_predicate(ord_insert(+X, +Y, -Z), 'ordset.pl').
system_predicate(ord_intersect(+X, +Y), 'ordset.pl').
system_predicate(ord_intersect(+X, +Y, -Z), 'ordset.pl').
system_predicate(ord_seteq(+X, +Y), 'ordset.pl').
system_predicate(ord_subset(+X, +Y), 'ordset.pl').
system_predicate(ord_subtract(+X, +Y, -Z), 'ordset.pl').
system_predicate(ord_symdiff(+X, +Y, -Z), 'ordset.pl').
system_predicate(ord_union(+X, +Y, -Z), 'ordset.pl').
system_predicate(ord_memberchk(+X, +Y), 'ordset.pl').
system_predicate(read(-X), 'read.pl', 'expands into read1/1, which is auto-included').
system_predicate(read(+S, -X), 'read.pl', 'expands into read1/1, which is auto-included').
system_predicate(read1(-X, -Y), 'read.pl', 'Y is unified with list of ATOM=VAR terms').
system_predicate(read_tokens(-X, -Y), 'rdtok.pl').
system_predicate(recorda(+X, -Y), 'rdb.pl').
system_predicate(recorda(+X, -Y, -Z), 'rdb.pl').
system_predicate(recorded(+X, -Y), 'rdb.pl').
system_predicate(recorded(+X, -Y, -Z), 'rdb.pl').
system_predicate(recordz(+X, -Y), 'rdb.pl').
system_predicate(recordz(+X, -Y, -Z), 'rdb.pl').
system_predicate(retract(+X), 'cdb.pl').
system_predicate(reverse(?X, ?Y), 'lists.pl').
system_predicate(see(+X), 'io.pl', 'may also pass stream (or "user")').
system_predicate(seen, 'io.pl', 'does nothing if stdin').
system_predicate(select(?X, ?Y, ?Z), 'sets.pl').
system_predicate(shell(+X), 'misc.pl', 'expects exit-status 0').
system_predicate(shell(+X, -Y), 'misc.pl').
system_predicate(skip(+X), 'io.pl').
system_predicate(sort(+X, -Y), 'sorts.pl').
system_predicate(subtract(+X, +Y, -Z), 'sets.pl').
system_predicate(tab(+X), 'io.pl').
system_predicate(tell(+X), 'io.pl', 'may also pass stream (or "user")').
system_predicate(throw(+X), 'misc.pl').
system_predicate(told, 'io.pl', 'does nothing if stdout or stderr').
system_predicate(read_string(+X, -Y), 'io.pl').
system_predicate(read_line(-Y), 'io.pl').
system_predicate(abolish(+PI), 'cdb.pl').
system_predicate(append(?X, ?Y, ?Z), 'lists.pl').
system_predicate(is_list(?X), 'lists.pl').
system_predicate(union(+X, +Y, -Z), 'sets.pl').
system_predicate(symdiff(+X, +Y, -Z), 'sets.pl').
system_predicate(?X =.. ?Y, 'misc.pl', '"univ"').
system_predicate(write(+X), 'write.pl').
system_predicate(writeq(+X), 'write.pl').
system_predicate(write(+S, +X), 'write.pl').
system_predicate(writeq(+S, +X), 'write.pl').
system_predicate(memberchk(?X, +Y), 'lib/lists.pl').
system_predicate(open(+X,+Y,-Z), 'lib/io.pl').
system_predicate(succ(?X,?Y), 'lib/arith.pl').
system_predicate(plus(?X,?Y,?Z), 'lib/arith.pl').
system_predicate(times(?X,?Y,?Z), 'lib/arith.pl').
system_predicate(divide(?X,?Y,?Z,?U), 'lib/arith.pl').
system_predicate(writef(+X), 'lib/writef.pl').
system_predicate(writef(+X,+Y), 'lib/writef.pl').
system_predicate(fwritef(+X,+Y), 'lib/writef.pl').
system_predicate(fwritef(+X,+Y,+Z), 'lib/writef.pl').
system_predicate(current_prolog_flag(+X,-Y), 'lib/flags.pl').
system_predicate(unify_with_occurs_check(?X, ?Y), 'lib/misc.pl').
system_predicate(set_input(+X), 'lib/io.pl').
system_predicate(set_output(+X), 'lib/io.pl').
system_predicate(set_error_output(+X), 'lib/io.pl').
system_predicate(flush_output, 'lib/io.pl').
system_predicate(flush_output(+X), 'lib/io.pl').
system_predicate(at_end_of_stream, 'lib/io.pl').
system_predicate(at_end_of_stream(+X), 'lib/io.pl').
system_predicate(atom_concat(?X, ?Y, ?Z), 'lib/iso.pl').
system_predicate(atom_chars(?X, ?Y), 'lib/iso.pl').
system_predicate(number_chars(?X, ?Y), 'lib/iso.pl').
system_predicate(get_char(?X), 'lib/iso.pl').
system_predicate(get_char(?X, ?Y), 'lib/iso.pl').
system_predicate(peek_char(?X), 'lib/iso.pl').
system_predicate(peek_char(?X, ?Y), 'lib/iso.pl').
system_predicate(put_char(?X), 'lib/iso.pl').
system_predicate(put_char(?X, ?Y), 'lib/iso.pl').

arithmetic_operation(- X).
arithmetic_operation(+ X).
arithmetic_operation(\ X).
arithmetic_operation(X + Y).
arithmetic_operation(X - Y).
arithmetic_operation(X * Y).
arithmetic_operation(X / Y).
arithmetic_operation(X // Y).
arithmetic_operation(X \\ Y).
arithmetic_operation(X rem Y).
arithmetic_operation(X /\ Y).
arithmetic_operation(X \/ Y).
arithmetic_operation(X >> Y).
arithmetic_operation(X << Y).
arithmetic_operation(X ** Y).
arithmetic_operation(X xor Y).
arithmetic_operation(abs(X)).
arithmetic_operation(atan(X)).
arithmetic_operation(ceiling(X)).
arithmetic_operation(cos(X)).
arithmetic_operation(exp(X)).
arithmetic_operation(float(X)).
arithmetic_operation(float_fractional_part(X)).
arithmetic_operation(float_integer_part(X)).
arithmetic_operation(floor(X)).
arithmetic_operation(log(X)).
arithmetic_operation(random(X)).
arithmetic_operation(round(X)).
arithmetic_operation(sign(X)).
arithmetic_operation(sin(X)).
arithmetic_operation(sqrt(X)).
arithmetic_operation(truncate(X)).
arithmetic_operation(clock).
arithmetic_operation(max(X, Y)).
arithmetic_operation(min(X, Y)).
