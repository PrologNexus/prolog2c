NOTES											              -*- Org -*-


* Optimization opportunities
** DONE Check: take advantage of timestamps when binding vars in unify() ?
   - try: when binding two unbound vars, bind the younger one.
   - implemented in branch /bind-younger/ and seems to work, but trail
     reduction is not much.
** DONE Implement memberchk/2 as primitive
   - needs benchmarking.
** writeq/1 could use foreign_call(basic_writeq(X)) for atoms
   - but the name needs to be classified anyway, because of the possibly
     required space in front of it.
** Mode-declarations
   - can probably be used in many ways, but needs more thought.
** TODO Determinacy declarations
   - i.e. ":- determinate(PI)."
   - file:da.pl
   - provide predicate "is_deterministic(EXPR)"
   - add declarations for all library predicates, where appropriate.
   - use determinism-information to find more tailcall-opportunities.
     - propagate mode, depending on called predicate, see:
       compile_ordinary_call in file:compile.pl
** TODO Extend clause indexing
*** Dispatch on atom- or fixnum list via hashing
    - add slot containing hash-code to symbol (created during interning)
    - generate table only for first predicate in list, redo in any of
      the clauses can jump back to dispatch for this block.
** Arithmetic
   - deref all vars just once at start.
   - track types, use unboxed math.
** With some sort of type/groundness analysis many primitives can be rewritten to simpler forms
   - functor, arg, name, '=..', etc.
** Matching term in db could be done in C
*** Unify inside db_find/db_next (properly undwinding trail on failure)
    - handling heap-full case on thawing still makes this ugly.
** TODO current_op/3 needs fast path when operator name is known
   - could use single-bucket db, with unififcation inside
     db_find/db_next (provided, we implement matching in file:pc.h)
** Deterministic goal in condition of if-then-else can drop some of the CP dance
   - same for '\\+'/2
   - fail could actually just perform a jump, perhaps redefine FAIL
     temporarily (or use intermediate macro).
** Analyze program before compiling to pseudo-instructions
   - perform determinacy-analysis for all code.
   - in other words: actually take advantage of having a static whole-program compiler.
* Things to test
** TODO [#B] Test on Windows
   - Port to MSVC
** TODO Run some or all tests with pi
** TODO Test retract-loop
   - file:tests/0069-cdb.pl
* Missing features
** TODO once/1
** TODO setof/bagof
   - file:_code/setof.pl works in pi.
   - needs part of implementation in expansion of setof/bagof call.
** TODO Extend numerical operators
   - constants "pi", perhaps "e"
   - "max", "min", "asin", "acos"
** TODO Make it possible to embed compiled code
    - "suspend(IN, OUT)" saves state and suspends execution.
    - define alternative entry-point via macro and return procedure
      ptr to invoke prolog (similar to BONES).
    - also allow access to global_variables, and (prefixed) access
      function.
* Diagnostics
** Detect singleton variables
** Detect redefinitions of primitives
** Report unused predicates
* Once we have a suitable test, compare performance with other implementations
  - SWI, GNU-Prolog, BinProlog
* Issues
** TODO [#B] Somehow the system is unstable
   - compiling 0088-chat_parser.pl with pc1 segfaults sometimes.
   - pc1 produced some garbage output when compiling 0085-boyer.pl.
   - seems very hard to reproduce.
** TODO [#B] Implementation of if-then-else is broken
   - if-then stack gets out of balance, found here:
     call_primitive('->', 2, TERM) :-
	!,
	arg(1, TERM, X), arg(2, TERM, Y),
	execute(X) -> execute(Y). % parsed as (!, ...) -> execute(Y)
   - adding parens around last goal repaired the problem, but still
     this shouldn't happen.
** Using multiple threads are currently not possible
   - all static vars would have to be declared TLS, but these may not
     be statically initialized with non-constants, and this applies to
     many data objects for literals.
** TODO Unbound var in arithmetic expr doesn't show variable name
   - extend var-rep to hold name, in addition to index.
** TODO [#B] We need trail-GC
    - and adjust CP-stack entries accordingly.
    - tricky.
** Is cycle-checking in =deref= really necessary?
   - apparently it is (various tests loop if this is disabled)
** TODO May a PI (predicate-indicator) be an atom, refering to all available arities?
    - would need to be added to abolish/1.
** TODO Throw ISO-compliant exceptions everywhere
    - at least as much as possible and sensible.
** TODO file:broken-tests/simple_analyzer.pl broken
    - exhausts heap, regardless of size.
** TODO file:tests/0085-boyer.pl exhausts heap when run under pi
   - somehow memory leaks, this looks similar to the problem with
     file:broken-tests/simple_analyzer.pl
** TODO ecrc benchmarks in file:/broken-tests work, but need higher settings
   - file:broken-tests/bench_1_5.pl needs -:T5M
* Interpreter
** TODO Add support for file:dcg.pl 
   - term_expansion/2.
   - but I need a way to hook into consult/1 from file:pi.pl, because
     adding DCG-support to interp seems better.
** TODO Additional predicates
   - listing/1
   - listing/0
     - needs some way to enumerate all predicates (current_predicate/1).
     - can use foreign_call(db_find_bucket(...))
* Test suites
** file:/archive/prologsuite.tar.gz
** file:/archive/inriasuite.tar.gz
