NOTES											              -*- Org -*-


* Issues
** Major
*** TODO 0046-arithmetic test fails in 32-bit pc
*** TODO Term-comparison doesn't handle cyclic structures, yet
*** TODO Why is so much space accumulating on arg- and env-stacks?
*** 0028-endless-tailcall crashes in pi
    - hits some limit, not sure which.
    - is in any case not keeping the memory-use constant.
*** TODO [#B] Implementation of if-then-else seems to be broken
   - if-then stack gets out of balance, found here:
     call_primitive('->', 2, TERM) :-
	!,
	arg(1, TERM, X), arg(2, TERM, Y),
	execute(X) -> execute(Y). % parsed as (!, ...) -> execute(Y)
   - adding parens around last goal repaired the problem, but still
     this shouldn't happen.
*** 0007-pi benchmark needs high memory/trail settings
    - crashes with defaults, which is to be expected, but it would be
      nice to catch this properly.
*** 32-bit version can't tokenize fractional part of real if it doesn't fit into an integer
   - e.g.:
     main :- f(0.463647609000806).
*** Everything is still rather slow and uses too much memory
   - see file:broken-tests/
*** Once trail-stack reserve is reached, GC will loop if the trail can't be reduced
*** If heap is insufficient deref_term/4 will loop endlessly
   - also recorded/X, retract/1 and clause/X, atom_codes/2,
     number_codes/2.
*** name/2 and functor/3 (and others?) may exceed heap-reserve for large inputs
   - atom_codes/2 could fail on full heap, force GC and retry,
     would need to be moved into file:lib/misc.pl
** Minor
*** '$call' doesn not check argc nor whether argument is ptr
    - needs to be safer, should it be exposed (or "meta_predicate"
      is made official)
*** pi: call/1 should probably handle X^Y terms (with quantifiers)
*** split_string/4 does not retain empty strings
    - this is incompatible to SWIs version.
*** TODO Eliminate redundant switch-operations
    - e.g.:
      #+BEGIN_SRC prolog
      foo(a, 1).
      foo(b, 1).
      foo(c, 1).
      foo(d, 1).
      #+END_SRC
      produces 4 switch_on_atom operations.
    - see compile_dispatch_sequence in file:index.pl
*** is integer_rounding_function really "towards_zero"?
*** Fresh checkout often leaves file:g-s-p.pl uncompiled
    - only rebuilds g-s-p.c, but that might not be sufficient.
    - but "make clean" should be sufficient.
*** pb should understand "volatile"
*** Failure in term_expansion/2 will simply be ignored
*** The output of TRACE_TAILCALL() is somewhat confusing
    - Not sure if arguments output reflects the correct state.
    - can we get rid of this?
*** Erasing a db-entry that is already marked is currently ignored
   - actual deletion will happen on next GC.
   - should we throw an error?
   - note that 0069-cdb deletes twice: first the retract of hello(X)
     and then the abolish of hello/1.
*** Handle freezing of db-refs
   - delete from deleted-items list?
   - what can happen?
   - currently caught by assertion in freeze_term_recursive()
*** Using multiple threads is currently not possible
   - all static vars would have to be declared TLS, but these may not
     be statically initialized with non-constants, and this applies to
     many data objects for literals.
   - but user-defined literals can't be shared, or not?
*** Unbound var in arithmetic expr doesn't show variable name
   - extend var-rep to hold name, in addition to index.
*** Reader-error should throw syntax_error with message argument
*** Throw ISO-compliant exceptions everywhere
    - at least as much as possible and sensible.
*** Isn't most of the stuff in file:lib/ordset.pl, file:lib/sets.pl determinate?
* Optimization opportunities
** Deref arguments in advance
** Use power-of-2 sized hash-tables 
   - use binary-and instead of mod operation.
** If clause contains a single tail-call, CP-creation could be avoided
   - saves little, though.
** Remove unused predicates
   - could be done in assembly-stage
     - register called predicates (and caller), compute unused
       predicates and predicates used by other unused predicates and
       drop sections of pseudo-instructions.
     - add pseudo-instructions for marking start + end of predicate
       definition.
** Peephole optimization of pseudo-instructions
** Environment trimming
   - sort variables by lifetime (reversed) and trim env_top after last use.
   - may only be applicable when env_top didn't change.
** Add "determinate" declarations and green cuts in library code
   - profile to find suitable points of improvement.
** Special-case calls of primitives that are known to always succeed
** DONE Take advantage of timestamps when binding vars in unify()
   - implemented in branch /bind-younger/ and seems to work, but trail
     is not slightly smaller.
** writeq/1 could use foreign_call(basic_writeq(X)) for atoms
   - but the name needs to be classified anyway, because of the possibly
     required space in front of it.
** Arithmetic
   - deref all vars just once at start.
   - track types, use unboxed math.
** 2-stream unification
   - rather complicated, first attempt at implementation ended in
     quite a mess and was abandoned.
** With some sort of type/groundness analysis many primitives could be optimized
   - functor, arg, name, univ, etc.
   - rewrite to simpler forms.
** Perform first match in C when looking up DB-entry
   - full unification may not trail properly due to timestamp issues.
   - could at least perform a simple match without binding variables.
   - must pass term to match in first-lookup and lookup for next item.
** current_op/3 needs fast path when operator name is known
   - could use single-bucket db, with unififcation inside
     db_find/db_next (provided, we implement matching in file:pc.h)
** Deterministic goal in condition of if-then-else can drop some of the CP dance
   - same for '\\+'/2, once/1
   - fail could actually just perform a jump, perhaps redefine FAIL
     temporarily (or use intermediate macro).
** Analyze program before compiling to pseudo-instructions
   - perform determinacy-analysis for all code.
   - in other words: actually take advantage of having a static whole-program compiler.
* Features
** User-defined meta-predicates
   - which currently hard-wired control-structures could be implemented
     in terms of this?
     | '\+'/1    |                                   |
     | once/1    |                                   |
     | forall/2  |                                   |
     | findall/3 |                                   |
     | setof/3   | needs to handle quantifiers, etc. |
     | bagof/4   | s.a.                              |
     | catch/3   | also special                      |
     | dif/2     |                                   |
     | freeze/2  |                                   |
     | delay/2   |                                   |
   - sample implementation of forall/2:
     #+BEGIN_SRC prolog
     forall(X, Y) :-
	     '$check_callable'(X),
	     '$check_callable'(Y),
	     arg(1, X, PTR1), arg(2, X, VARS1),
	     arg(1, Y, PTR2), arg(2, Y, VARS2),
	     '$call'(PTR1, VARS1),
	     \+'$call'(PTR2, VARS2), !, fail.
     forall(_, _).
     #+END_SRC
** TODO Check if we can use file:lib/canon.pl for printing query results
** DONE if term_expansion/2 returns list, treat as separate (or no) terms
   - add this also to /pi-in-pc/
** handle arbitrary signals
** dlopen, dlsym, to access primitives written in C
** Show warning for untriggered delayed goals with "-:d"
   - check trail-entries when unwinding trail and before exit.
** Allow access to delay goals
   - frozen(VAR, PTRARGS) :: return ptr/args pairs,
        non-deterministically
** Unicode
   - arbitrary character codes in strings (UTF-8?)
   - atom-length (string_length())
   - extend name/2, get/1, get0/1, put/1, skip/1 (and probably many
     more)
   - different handling of put_code/put_byte, get_code/get_byte and
     peek_code/peek_byte
* Documentation
** DONE News
   - current_prolog_flag/2 understands apple, windows, unix
   - Added builtins put/2, tab/2, skip/2, get/2, get0/2, is_list/1,
     exists_directory/1, atomic_list_concat/2, split_string/4,
     terminal_stream/1
   - Added support for stream aliases "current_input",
     "current-output", "user_input", "user_output" and "user_error".
   - Dropped peek/1
   - pi: Respects PC_LIBRARY_DIR.
   - PC_INCLUDE_PATH has been renamed PC_LIBRARY_DIR and is only
     allowed to contain a single directory.
   - Filenames may now be "library(NAME)", refering to the current
     library directory.
** Add pc-autocompile to dist and document
   - find a better name.
** Missing ISO predicates
   | Name                                         | Remarks                                        |
   |----------------------------------------------+------------------------------------------------|
   | sub_atom/5                                   |                                                |
   | current_predicate/1                          | unimplemented                                  |
   | set_prolog_flag/2                            | unimplemented, as there are no changable flags |
   | call/1                                       | unimplemented                                  |
   | close/2                                      | unimplemented                                  |
   | set_stream_position/2                        | too vague to be useful                         |
   | stream_property/2                            |                                                |
   | char_conversion/2, current_char_conversion/2 | unimplemented                                  |
   | read_term/2, read_term/3                     |                                                |
   | write_canonical/1, write_canonical/2         |                                                |
   | write_term/2, write_term/3                   |                                                |
** ISO-extensions ISO DTR 13211-1:2006
   | numbervars/3                   |                                           |
   | log/2, atan/2, asin/1, acos/1, | arithmetic expressions                    |
   | epsilon/0, pi/0, e/0           | arithmetic constants                      |
   | ^/2                            | integer exponentation (error on overflow) |
* Tools
** "pm": build utility
   - takes a bunch of files and produces a wrapper and a makefile.
   - detect .bind files and integrate.
* Diagnostics
** Detect singleton variables
** Report unused predicates
* Experimental
** DONE /pi-in-pc/ (make interpreter available in compiler)
   - use of term_expansion/2 is awkward, but handy.
   - allows arbitrary latent goals.
   - compare file-size + compile overhead in optimized mode.
   - would allow conditional compilation.
** DONE /intmath/ (integer-only math)
   - lib/rdtok returns end_of_file when reading flonum (which makes pi
     terminate, for example)
   - would have to disable flonum-parsing in rdtok, which needs
     conditional, depending on variant (with flonums or without)
* Runtime
** TODO Use macro to check for exceeded heap-limit
* Tests
** TODO profile with gprof
* Test suites
** file:/archive/prologsuite.tar.gz
** file:/archive/inriasuite.tar.gz
** file:/archive/iclpgcbenches.tar.gz
* Undocumented features
** Compiler
*** '$predicate_address'/2
*** "meta_predicate" directive and usage
** Builtins
*** deref_term/4
*** read1/2
*** '$call'/2
*** Single-element list in arithmetic expressions
** Interpreter
*** expand_term/2 + term_expansion/2
* Release steps
** Document changes
** make fullcheck
** Test on WIN64
** Test on Mac
** Test on [pi], [call-cc]
** Test dist
** Tag, push, upload
** Bump version (file:README + file:lib/flags.pl)
